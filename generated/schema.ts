// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("symbol", Value.fromString(""));
    this.set("isStable", Value.fromBoolean(false));
    this.set("totalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("decimals", Value.fromI32(0));
    this.set("token0", Value.fromString(""));
    this.set("token1", Value.fromString(""));
    this.set("reserve0", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("reserve1", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Pair entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Pair", id.toString(), this);
    }
  }

  static load(id: string): Pair | null {
    return changetype<Pair | null>(store.get("Pair", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get isStable(): boolean {
    let value = this.get("isStable");
    return value!.toBoolean();
  }

  set isStable(value: boolean) {
    this.set("isStable", Value.fromBoolean(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value!.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value!.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get reserve0(): BigDecimal {
    let value = this.get("reserve0");
    return value!.toBigDecimal();
  }

  set reserve0(value: BigDecimal) {
    this.set("reserve0", Value.fromBigDecimal(value));
  }

  get reserve1(): BigDecimal {
    let value = this.get("reserve1");
    return value!.toBigDecimal();
  }

  set reserve1(value: BigDecimal) {
    this.set("reserve1", Value.fromBigDecimal(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("chainId", Value.fromI32(0));
    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("decimals", Value.fromBigInt(BigInt.zero()));
    this.set("logoURI", Value.fromString(""));
    this.set("isWhitelisted", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get chainId(): i32 {
    let value = this.get("chainId");
    return value!.toI32();
  }

  set chainId(value: i32) {
    this.set("chainId", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get logoURI(): string {
    let value = this.get("logoURI");
    return value!.toString();
  }

  set logoURI(value: string) {
    this.set("logoURI", Value.fromString(value));
  }

  get isWhitelisted(): boolean {
    let value = this.get("isWhitelisted");
    return value!.toBoolean();
  }

  set isWhitelisted(value: boolean) {
    this.set("isWhitelisted", Value.fromBoolean(value));
  }
}

export class LendingPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("x", Value.fromBigInt(BigInt.zero()));
    this.set("y", Value.fromBigInt(BigInt.zero()));
    this.set("z", Value.fromBigInt(BigInt.zero()));
    this.set("assetReserve", Value.fromBigInt(BigInt.zero()));
    this.set("collateralReserve", Value.fromBigInt(BigInt.zero()));
    this.set("totalLiquidity", Value.fromBigInt(BigInt.zero()));
    this.set("totalBondPrincipal", Value.fromBigInt(BigInt.zero()));
    this.set("totalBondInterest", Value.fromBigInt(BigInt.zero()));
    this.set("totalInsurancePrincipal", Value.fromBigInt(BigInt.zero()));
    this.set("totalInsuranceInterest", Value.fromBigInt(BigInt.zero()));
    this.set("totalDebtCreated", Value.fromBigInt(BigInt.zero()));
    this.set("assetSpot", Value.fromI32(0));
    this.set("collateralSpot", Value.fromI32(0));
    this.set("fee", Value.fromI32(0));
    this.set("protocolFee", Value.fromI32(0));
    this.set("feeStored", Value.fromBigInt(BigInt.zero()));
    this.set("protocolFeeStored", Value.fromBigInt(BigInt.zero()));
    this.set("apr", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LendingPair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LendingPair entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LendingPair", id.toString(), this);
    }
  }

  static load(id: string): LendingPair | null {
    return changetype<LendingPair | null>(store.get("LendingPair", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get x(): BigInt {
    let value = this.get("x");
    return value!.toBigInt();
  }

  set x(value: BigInt) {
    this.set("x", Value.fromBigInt(value));
  }

  get y(): BigInt {
    let value = this.get("y");
    return value!.toBigInt();
  }

  set y(value: BigInt) {
    this.set("y", Value.fromBigInt(value));
  }

  get z(): BigInt {
    let value = this.get("z");
    return value!.toBigInt();
  }

  set z(value: BigInt) {
    this.set("z", Value.fromBigInt(value));
  }

  get assetReserve(): BigInt {
    let value = this.get("assetReserve");
    return value!.toBigInt();
  }

  set assetReserve(value: BigInt) {
    this.set("assetReserve", Value.fromBigInt(value));
  }

  get collateralReserve(): BigInt {
    let value = this.get("collateralReserve");
    return value!.toBigInt();
  }

  set collateralReserve(value: BigInt) {
    this.set("collateralReserve", Value.fromBigInt(value));
  }

  get totalLiquidity(): BigInt {
    let value = this.get("totalLiquidity");
    return value!.toBigInt();
  }

  set totalLiquidity(value: BigInt) {
    this.set("totalLiquidity", Value.fromBigInt(value));
  }

  get totalBondPrincipal(): BigInt {
    let value = this.get("totalBondPrincipal");
    return value!.toBigInt();
  }

  set totalBondPrincipal(value: BigInt) {
    this.set("totalBondPrincipal", Value.fromBigInt(value));
  }

  get totalBondInterest(): BigInt {
    let value = this.get("totalBondInterest");
    return value!.toBigInt();
  }

  set totalBondInterest(value: BigInt) {
    this.set("totalBondInterest", Value.fromBigInt(value));
  }

  get totalInsurancePrincipal(): BigInt {
    let value = this.get("totalInsurancePrincipal");
    return value!.toBigInt();
  }

  set totalInsurancePrincipal(value: BigInt) {
    this.set("totalInsurancePrincipal", Value.fromBigInt(value));
  }

  get totalInsuranceInterest(): BigInt {
    let value = this.get("totalInsuranceInterest");
    return value!.toBigInt();
  }

  set totalInsuranceInterest(value: BigInt) {
    this.set("totalInsuranceInterest", Value.fromBigInt(value));
  }

  get totalDebtCreated(): BigInt {
    let value = this.get("totalDebtCreated");
    return value!.toBigInt();
  }

  set totalDebtCreated(value: BigInt) {
    this.set("totalDebtCreated", Value.fromBigInt(value));
  }

  get assetSpot(): i32 {
    let value = this.get("assetSpot");
    return value!.toI32();
  }

  set assetSpot(value: i32) {
    this.set("assetSpot", Value.fromI32(value));
  }

  get collateralSpot(): i32 {
    let value = this.get("collateralSpot");
    return value!.toI32();
  }

  set collateralSpot(value: i32) {
    this.set("collateralSpot", Value.fromI32(value));
  }

  get fee(): i32 {
    let value = this.get("fee");
    return value!.toI32();
  }

  set fee(value: i32) {
    this.set("fee", Value.fromI32(value));
  }

  get protocolFee(): i32 {
    let value = this.get("protocolFee");
    return value!.toI32();
  }

  set protocolFee(value: i32) {
    this.set("protocolFee", Value.fromI32(value));
  }

  get feeStored(): BigInt {
    let value = this.get("feeStored");
    return value!.toBigInt();
  }

  set feeStored(value: BigInt) {
    this.set("feeStored", Value.fromBigInt(value));
  }

  get protocolFeeStored(): BigInt {
    let value = this.get("protocolFeeStored");
    return value!.toBigInt();
  }

  set protocolFeeStored(value: BigInt) {
    this.set("protocolFeeStored", Value.fromBigInt(value));
  }

  get apr(): BigDecimal {
    let value = this.get("apr");
    return value!.toBigDecimal();
  }

  set apr(value: BigDecimal) {
    this.set("apr", Value.fromBigDecimal(value));
  }
}

export class CDP extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ratio", Value.fromBigInt(BigInt.zero()));
    this.set("percent", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CDP entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CDP entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CDP", id.toString(), this);
    }
  }

  static load(id: string): CDP | null {
    return changetype<CDP | null>(store.get("CDP", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ratio(): BigInt {
    let value = this.get("ratio");
    return value!.toBigInt();
  }

  set ratio(value: BigInt) {
    this.set("ratio", Value.fromBigInt(value));
  }

  get percent(): BigDecimal {
    let value = this.get("percent");
    return value!.toBigDecimal();
  }

  set percent(value: BigDecimal) {
    this.set("percent", Value.fromBigDecimal(value));
  }
}
